{"version":3,"sources":["routes/tables/tumteklifler/TumTeklifler.js"],"names":["TumTeklifler","useState","tableData","setTableData","details","setDetails","clickedItemIndex","setClickedItemIndex","order","setOrder","total","setTotal","bakiyeSonra","setBakiyeSonra","eczaneName","useSelector","state","user","userSettings","bakiye","userInfo","GET_ALL_APPLICATIONS","gql","useQuery","fetchPolicy","onError","error","console","log","loading","refetch","data","useEffect","applications","length","dataArr","map","obj","d","Date","Number","final_date","date","getFullYear","getMonth","getDate","bgColor","status","birimFiyat","unit_price","durum","eczane","submitter","hedef","goal","ID","application_id","kampanya","condition","pledge","submitter_pledge","sonTarih","İlaç","product_name","description","katılanlar","joiners","className","style","border","header","items","fields","columnFilter","footer","itemsPerPage","sorter","pagination","scopedSlots","item","fontSize","color","getCondition","getBadge","getStatus","index","variant","shape","size","onClick","toggleDetails","includes","show","sm","whichCollapsedToRender"],"mappings":"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","file":"static/js/14.58a452e1.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CDataTable, CBadge, CButton, CCollapse, CCol, CLabel, CRow } from \"@coreui/react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { gql, useQuery } from \"@apollo/client\"\r\nimport { fields, getBadge, getStatus, getCondition, toggleDetails, whichCollapsedToRender } from \"../\";\r\nimport \"../style.css\"\r\n\r\nconst TumTeklifler = () => {\r\n    const [tableData, setTableData] = useState([])\r\n    const [details, setDetails] = useState([])\r\n    const [clickedItemIndex, setClickedItemIndex] = useState(0)\r\n    const [order, setOrder] = useState(0)\r\n    const [total, setTotal] = useState(0)\r\n    const [bakiyeSonra, setBakiyeSonra] = useState(0)\r\n    \r\n    const eczaneName = useSelector(state => state.user.userSettings.eczaneName)\r\n    const bakiye = useSelector(state => state.user.userInfo.bakiye)\r\n\r\n    const GET_ALL_APPLICATIONS = gql`\r\n      query {\r\n        applications{\r\n          application_id\r\n          transaction_id\r\n          product_name\r\n          product_barcode\r\n          goal\r\n          condition\r\n          unit_price\r\n          submitter\r\n          submitter_pledge\r\n          description\r\n          status\r\n          joiners {\r\n            name\r\n            pledge\r\n          }\r\n          submit_date\r\n          final_date\r\n          status_change_date\r\n        }\r\n      }\r\n    `;\r\n    const { loading, refetch , data} = useQuery(GET_ALL_APPLICATIONS, {\r\n      fetchPolicy: \"network-only\",\r\n      onError: (error) => console.log(error)\r\n    });\r\n\r\n    useEffect(() => {\r\n      if(loading === false && data){\r\n        if (data.applications.length !== 0) {\r\n          const dataArr = data.applications.map((obj) => {\r\n            let d = new Date(Number(obj.final_date))\r\n            let date = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\r\n            let bgColor = \"\"\r\n            switch (obj.status) {\r\n              case \"APPROVED\":\r\n                bgColor = \"rgb(55, 229, 148, 0.25)\";\r\n                break;\r\n              case \"DELETED\":\r\n                bgColor = \"red\";\r\n                break\r\n              default:\r\n                break;\r\n            }\r\n            return {\r\n              birimFiyat: obj.unit_price,\r\n              durum: obj.status,\r\n              eczane: obj.submitter,\r\n              hedef: obj.goal,\r\n              ID: obj.application_id,\r\n              kampanya: obj.condition,\r\n              pledge: obj.submitter_pledge,\r\n              sonTarih: date,\r\n              İlaç: obj.product_name,\r\n              description: obj.description,\r\n              katılanlar: obj.joiners,\r\n              bgColor\r\n            }\r\n          })\r\n          return setTableData(dataArr)\r\n        }\r\n      }\r\n    }, [loading, data])\r\n    useEffect(() => {\r\n      if (order >= 0) {\r\n        setTotal(order * tableData[clickedItemIndex]?.birimFiyat)\r\n        setBakiyeSonra(bakiye - total)\r\n      }\r\n    }, [order, total, clickedItemIndex, bakiye, tableData])\r\n  \r\n    return (\r\n      <>\r\n      <CRow>\r\n        <CCol>\r\n          <CLabel className = \"tableLabel tumtekliflerGradient\" >Tüm Teklifler </CLabel>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n          <CCol>\r\n            <div style = {{border: \"solid 1px rgb(229, 83, 83, 0.35)\"}} >\r\n              <CDataTable\r\n                loading = {loading}\r\n                header\r\n                items={tableData}\r\n                fields={fields}\r\n                columnFilter\r\n                footer\r\n                itemsPerPage={50}\r\n                sorter\r\n                pagination\r\n                border\r\n                scopedSlots = {{\r\n                  'eczane':\r\n                    (item)=>(\r\n                      <td style = {{fontSize: \"12px\"}} >\r\n                          {item.eczane}\r\n                      </td>\r\n                    ),\r\n                  'İlaç':\r\n                  (item)=>(\r\n                    <td>\r\n                      <b>{item.İlaç}</b>\r\n                    </td>\r\n                    ),\r\n                  'hedef':\r\n                    (item)=>(\r\n                      <td>\r\n                        <CBadge color={\"secondary\"}>\r\n                        {item.pledge}/{item.hedef}\r\n                        </CBadge>\r\n                      </td>\r\n                    ),\r\n                    'birimFiyat':\r\n                  (item)=>(\r\n                    <td style = {{color: \"green\"}} >\r\n                      {item.birimFiyat} TL\r\n                    </td>\r\n                  ),\r\n                  'kampanya':\r\n                  (item)=>(\r\n                    <td>\r\n                      {\r\n                        getCondition(item.kampanya)\r\n                      }\r\n                    </td>\r\n                  ),\r\n                  'durum':\r\n                    (item)=>(\r\n                      <td>\r\n                        <CBadge color={getBadge(item.durum)}>\r\n                          {getStatus(item.durum)}\r\n                        </CBadge>\r\n                      </td>\r\n                    ),\r\n                  'show_details':\r\n                    (item, index)=>{\r\n                      return (\r\n                        <td className=\"py-2\">\r\n                          <CButton\r\n                            color=\"primary\"\r\n                            variant=\"outline\"\r\n                            shape=\"square\"\r\n                            size=\"sm\"\r\n                            onClick={()=>{\r\n                              toggleDetails(index, details, setDetails, setOrder, setTotal, setBakiyeSonra)\r\n                              setClickedItemIndex(index)\r\n                              }}\r\n                          >\r\n                            {details.includes(index) ? 'Sakla' : 'Göster'}\r\n                          </CButton>\r\n                        </td>\r\n                        )\r\n                    },\r\n                  'details':\r\n                      (item, index)=>{\r\n                        return (\r\n                        <CCollapse show={details.includes(index)}>\r\n                            <CCol sm = \"12\">\r\n                              {whichCollapsedToRender(eczaneName, item.eczane, item, index, order, setOrder, total, bakiyeSonra, refetch)}\r\n                            </CCol>\r\n                        </CCollapse>\r\n                      )\r\n                    }\r\n                }}\r\n              />\r\n            </div>\r\n          </CCol>\r\n      </CRow>\r\n      </>\r\n      )\r\n}\r\n\r\nexport default TumTeklifler;"],"sourceRoot":""}