{"version":3,"sources":["../../../../src/react/parser/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../../src/react/data/OperationData.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/modals/Modal.js","../../../../src/react/data/MutationData.ts","../../../../src/react/hooks/useMutation.ts","components/toaster/Toaster.js","pages/register/Register.js"],"names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","_arrayLikeToArray","arr","len","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","from","test","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError","options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","requiredOperationName","usedOperationName","_toConsumableArray","arrayLikeToArray","iter","Modal","props","dispatch","show","on","onClose","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","result","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","catch","error","onError","onMutationError","data","errors","mutation","mostRecentMutationId","execute","afterExecute","bind","loading","ignoreResults","updateResult","called","onCompleted","graphQLErrors","isMostRecentMutation","previousResult","OperationData","useMutation","updatedOptions","mutationDataRef","mutationData","current","Toaster","position","autohide","fade","Register","modalErrorObj","modalSuccessObj","useState","username","setUsername","pharmacyName","setPharmacyName","password","setPassword","confirmPassword","setConfirmPassword","modal","setModalOn","toasters","addToaster","reset","REGISTER_USER","gql","fetchPolicy","pharmacy_name","console","log","code","registerUser","className","Loader","isLoading","map","element","md","lg","xl","to","placeholder","autoComplete","onChange","e","target","block"],"mappings":"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","file":"static/js/6.edeca853.chunk.js","sourcesContent":["import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch) {\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    } else {\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { CToaster, CToast, CToastBody } from \"@coreui/react\"\r\n\r\nconst Toaster = ({color, body, show}) => {\r\n    return (\r\n        <CToaster position=\"top-right\">\r\n            <CToast show={show} autohide={3000} fade={true} color={color} style = {{textAlign: \"center\"}}>\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport { Link } from \"react-router-dom\"\r\nimport CIcon from '@coreui/icons-react'\r\nimport { gql, useMutation } from \"@apollo/client\"\r\nimport Modal from '../../components/modals/Modal'\r\nimport Toaster from '../../components/toaster/Toaster'\r\nimport Loader from \"../../hoc/loader/Loader\"\r\n\r\nconst Register = () => {\r\n  const missingInfo = \"Lütfen tüm alanları doldurunuz\"\r\n  const unmatchedPassword = \"Şifreniz uyuşmuyor, lütfen şifrelerinizi kontrol edin\"\r\n  const userAlreadyExists = \"Bu kullanıcı adı alınmıştır. Lütfen farklı bir kullanıcı adı seçiniz\"\r\n  const modalErrorObj = {\r\n    header: \"HATA\",\r\n    body: \"Bilgileriniz kaydedilmedi, lütfen daha sonra tekrar deneyin\",\r\n    color: \"danger\"\r\n  }\r\n  const modalSuccessObj = {\r\n    header: \"BAŞARILI\",\r\n    body: \"Talebiniz başarıyla işlenmiştir! giriş yapabilirsiniz.\",\r\n    color: \"success\"\r\n  }\r\n  const [username, setUsername] = useState(\"\")\r\n  const [pharmacyName, setPharmacyName] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n  const [modal, setModal] = useState({\r\n    header: \"\",\r\n    body: \"\",\r\n    color: \"\"\r\n  })\r\n  const [modalOn, setModalOn] = useState(false)\r\n  const [toasters, addToaster] = useState([])\r\n  const reset = () => {\r\n    setUsername(\"\")\r\n    setPharmacyName(\"\")\r\n    setPassword(\"\")\r\n    setConfirmPassword(\"\")\r\n  }\r\n  const REGISTER_USER = gql`\r\n    mutation($username: String!, $password: String!, $pharmacy_name:String!) {\r\n      register(username: $username, password: $password, pharmacy_name: $pharmacy_name) {\r\n        username\r\n        password\r\n        pharmacy_name\r\n      }\r\n    }\r\n  `;\r\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\r\n    fetchPolicy: \"no-cache\",\r\n    variables: {username, password, pharmacy_name: pharmacyName},\r\n    onError: (err) => {\r\n      console.log()\r\n      if (err.graphQLErrors[0]?.code === 451) {\r\n        addToaster([\r\n          ...toasters,\r\n          {body: userAlreadyExists}\r\n        ])\r\n      } else {\r\n        setModal(modalErrorObj)\r\n        setModalOn(true)\r\n        reset()\r\n      }\r\n    },\r\n    onCompleted: (data) => {\r\n      setModal(modalSuccessObj)\r\n      setModalOn(true)\r\n      reset()\r\n    }\r\n  })\r\n  const verifyInput = () => {\r\n    if (username === \"\" || password === \"\" || confirmPassword === \"\" || pharmacyName === \"\") {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: missingInfo}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  const verifyPassword = () => {\r\n    if (password !== confirmPassword) {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: unmatchedPassword}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n      <Loader isLoading = {loading} >\r\n        <CContainer>\r\n        {\r\n          toasters.map((element, i) => {\r\n            return <Toaster key = {i} body = {element.body} show = {true} color = {\"danger\"} />\r\n          })\r\n        }\r\n        <Modal header = {modal.header} body = {modal.body} color = {modal.color} modalOn = {modalOn} setModal = {setModalOn}/>\r\n          <CRow className=\"justify-content-center\">\r\n            <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n              <CCard className=\"mx-4\">\r\n                <CCardBody className=\"p-4\">\r\n                  <CForm>\r\n                    <div className = \"container\">\r\n                      <div className = \"row\">\r\n                        <div className = \"col\">\r\n                          <h1>Kayıt olun</h1>\r\n                          <p className=\"text-muted\">Hesabınızı oluşturun</p>\r\n                        </div>\r\n                        <div>\r\n                          <Link to = \"/login\" ><p>Giriş sayfasına git</p></Link>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"text\" placeholder=\"Kullanıcı isminiz\" autoComplete=\"username\" value = {username}\r\n                      onChange = {(e) => setUsername(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"text\" placeholder=\"Eczanenizin ismi ÖRN: Hayat Eczanesi\" autoComplete=\"pharmacy-name\" value = {pharmacyName}\r\n                      onChange = {(e) => {\r\n                        setPharmacyName(e.target.value)\r\n                        }} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"password\" placeholder=\"Şifreniz\" autoComplete=\"new-password\" value = {password}\r\n                      onChange = {(e) => setPassword(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"password\" placeholder=\"Şifrenizi tekrar giriniz\" autoComplete=\"new-password\" value = {confirmPassword}\r\n                      onChange = {(e) => setConfirmPassword(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CButton color=\"success\" block onClick = {() => {\r\n                      if (verifyInput() === false || verifyPassword() === false)\r\n                        return\r\n                      else registerUser()\r\n                    }}>Hesabınızı oluşturun</CButton>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n      </Loader>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n"],"sourceRoot":""}