{"version":3,"sources":["../../../../src/react/parser/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../../src/react/hooks/useQuery.ts","routes/urunekle/UrunEkle.js"],"names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","_arrayLikeToArray","arr","len","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","from","test","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError","options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","requiredOperationName","usedOperationName","onNewData","runLazy","previous","create","runLazyQuery","lazyOptions","obsRefetch","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","ssrInitiated","disableNetworkFetches","handleErrorOrCompleted","bind","result","renderPromises","ssrDisabled","fetchDisabled","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","assign","currentResult","getCurrentResult","partial","errors","graphQLErrors","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","_toConsumableArray","arrayLikeToArray","iter","useQuery","UrunEkle","dispatch","useDispatch","useState","details","setDetails","input","setInput","medicineList","useSelector","state","GET_SEARCH_LIST","gql","inputField","console","log","JSON","parse","stringify","product","map","obj","İlaç","Product_name","barKod","Barcode","ATC_Kodu","ATC_code","reçeteTürü","onTableFilterChange","e","tableFilter","items","fields","itemsPerPage","pagination","scopedSlots","item","index","className","color","variant","shape","size","onClick","position","indexOf","newDetails","splice","toggleDetails","includes","show","description","React","memo"],"mappings":"8FAMA,0GAEYA,EAFZ,QAEA,SAAYA,GACV,qBACA,2BACA,mCAHF,CAAYA,MAAY,KAYxB,IAAMC,EAAQ,IAAIC,IAEZ,SAAUC,EAAcC,GAC5B,IAAIC,EACJ,OAAQD,GACN,KAAKJ,EAAaM,MAChBD,EAAO,QACP,MACF,KAAKL,EAAaO,SAChBF,EAAO,WACP,MACF,KAAKL,EAAaQ,aAChBH,EAAO,eAGX,OAAOA,EAIH,SAAUI,EAAOC,GACrB,IAGIC,EAAWP,EAHTQ,EAASX,EAAMY,IAAIH,GACzB,GAAIE,EAAQ,OAAOA,EAInB,QACE,cAAU,KAAe,EACzB,oBAAuB,EAAvB,yJAGA,8BAEF,IAAME,EAAYJ,EAASK,YAAYC,QACrC,SAACC,GAAsB,6BAAAA,EAAEC,QAGrBC,EAAUT,EAASK,YAAYC,QACnC,SAACC,GACC,MAAW,wBAAXA,EAAEC,MAAkD,UAAhBD,EAAEG,aAGpCC,EAAYX,EAASK,YAAYC,QACrC,SAACC,GACC,MAAW,wBAAXA,EAAEC,MAAkD,aAAhBD,EAAEG,aAGpCE,EAAgBZ,EAASK,YAAYC,QACzC,SAACC,GACC,MAAW,wBAAXA,EAAEC,MAAkD,iBAAhBD,EAAEG,aAG1C,QACE,aAAW,EAAM,QACdD,EAAQI,QAAUF,EAAUE,QAAUD,EAAcC,OACvD,yHAEA,uBAEF,EACE,QAAQ,EAAS,QAAgB,EAAG,OAAoB,IAEnD,oBAAQ,EAAQ,OAAQ,EAAM,SAAa,QAAoB,8EAClE,YAAqB,OAAU,aAAM,EAAc,OADe,sBAElE,SAFkE,qFAKH,8CACnE,EAAKJ,EAAQI,OAAW,EAAU,MAAM,WAAE,EAAO,QAAa,WAExD,IAAc,c,IAClB,EAAS,SACP,EACF,EAAE,OACA,EAGF,EAEK,oBAAkC,IAAtB,EAAM,OAAgB,gEACrC,SADqC,uFAIoB,6BAC7D,MAAY,EAAW,GAEvB,EAAIC,EAAmB,qBAAoB,GAO3C,MAAU,MANR,EAAO,MAAsB,SAAX,EAAW,UAC9B,aAEA,OAG2B,KAAC,eAE9B,OADC,MAAO,EAAQ,GAChB,I,iCClHc,SAASC,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIH,UAAQI,EAAMD,EAAIH,QAE/C,IAAK,IAAIK,EAAI,EAAGC,EAAO,IAAIC,MAAMH,GAAMC,EAAID,EAAKC,IAC9CC,EAAKD,GAAKF,EAAIE,GAGhB,OAAOC,EAPT,mC,iCCAA,+CACe,SAASE,EAA4BC,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,YAAiBA,EAAGC,GACtD,IAAIC,EAAIC,OAAOC,UAAUC,SAASC,KAAKN,GAAGO,MAAM,GAAI,GAEpD,MADU,WAANL,GAAkBF,EAAEQ,cAAaN,EAAIF,EAAEQ,YAAYnC,MAC7C,QAAN6B,GAAqB,QAANA,EAAoBJ,MAAMW,KAAKT,GACxC,cAANE,GAAqB,2CAA2CQ,KAAKR,GAAW,YAAiBF,EAAGC,QAAxG,K,gFCHa,SAASU,EAAejB,EAAKE,GAC1C,OCLa,SAAyBF,GACtC,GAAII,MAAMc,QAAQlB,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKE,GACjD,GAAsB,qBAAXiB,QAA4BA,OAAOC,YAAYX,OAAOT,GAAjE,CACA,IAAIqB,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAK3B,EAAImB,OAAOC,cAAmBE,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAET7B,GAAKmB,EAAKxB,SAAWK,GAH8CoB,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBrB,EAAKE,IAAM,OAAA+B,EAAA,GAA2BjC,EAAKE,IGLjF,WACb,MAAM,IAAIgC,UAAU,6IHIgF,K,iCIJtG,8DAOA,aAUE,WAAYC,EAAmCC,GATxC,KAAAC,WAAqB,EACrB,KAAAC,gBAA2C,GAG3C,KAAAF,QAAe,GAGd,KAAAD,QAAmC,GAGzCI,KAAKJ,QAAUA,GAAY,GAC3BI,KAAKH,QAAUA,GAAW,GA2D9B,OAxDS,YAAAI,WAAP,WACE,OAAOD,KAAKJ,SAGP,YAAAM,WAAP,SACEC,EACAC,QAAA,IAAAA,OAAA,GAEIA,IAAkB,YAAMJ,KAAKJ,QAASO,KACxCH,KAAKD,gBAAkBC,KAAKJ,SAE9BI,KAAKJ,QAAUO,GAOP,YAAAE,QAAV,WACEL,KAAKF,WAAY,GAGT,YAAAQ,cAAV,WACE,IAAMC,EACHP,KAAKJ,SAAWI,KAAKJ,QAAQW,QAC7BP,KAAKH,SAAWG,KAAKH,QAAQU,OAEhC,QACE,cACA,wKAGA,oBAEF,IAAIC,GAAQ,EAMZ,OALID,IAAWP,KAAKO,SAClBC,GAAQ,EACRR,KAAKO,OAASA,EACdP,KAAKS,WAEA,CACLF,OAAQP,KAAKO,OACbC,MAAK,IAIC,YAAAE,mBAAV,SAA6BjE,EAAwBN,GACnD,IAAMgB,EAAY,YAAOV,GACnBkE,EAAwB,YAAcxE,GACtCyE,EAAoB,YAAczD,EAAUhB,MAClD,QACE,YAAU,EAASA,OACnB,eAAawE,EAAqB,uBAC7BA,EAAqB,WAAWC,EAAiB,sBACtD,4BAEN,EAvEA,I,sHCyBA,cAkBE,WAAY,G,IACVhB,EAAO,UACPC,EAAO,UACPgB,EAAS,YAHX,EASE,YAAMjB,EAASC,IAAQ,K,OArBjB,EAAAiB,SAAmB,EAEnB,EAAAC,SAQJ7C,OAAO8C,OAAO,MAsGV,EAAAC,aAAe,SAACrB,GACtB,EAAKa,UACL,EAAKK,SAAU,EACf,EAAKI,YAActB,EACnB,EAAKiB,aA+UC,EAAAM,WAAa,SAACzE,GAA+B,MACnD,OAAsB,QAAtB,IAAK0E,yBAAiB,eAAEC,QAAQ3E,IAE1B,EAAA4E,aAAe,SACrBC,GACqC,MAClC,OAAsB,QAAtB,IAAKH,yBAAiB,eAAEI,UAAUD,IAE/B,EAAAE,eAAiB,SACvBC,GAGU,MACP,OAAsB,QAAtB,IAAKN,yBAAiB,eAAEO,YAAYD,IAEjC,EAAAE,gBAAkB,SAACC,G,MACH,QAAtB,IAAKT,yBAAiB,SAAEU,aAAaD,IAG/B,EAAAE,eAAiB,W,MACD,QAAtB,IAAKX,yBAAiB,SAAEY,eAGlB,EAAAC,mBAAqB,SAI3BrC,GAIC,MACE,OAAsB,QAAtB,IAAKwB,yBAAiB,eAAEc,gBAAgBtC,IA7c3C,EAAKiB,UAAYA,E,EA0drB,OAtfkD,iBA+BzC,YAAAsB,QAAP,WACEnC,KAAKM,gBAEC,MAAkBN,KAAKC,aAArBmC,EAAI,OAAEC,EAAK,QASnB,OARID,GAAQC,IAAUrC,KAAKe,SAASsB,SAClCrC,KAAKsC,0BACLtC,KAAKuC,kBAAkBH,GACvBpC,KAAKe,SAASsB,MAAQA,GAGxBrC,KAAKwC,wBAEExC,KAAKyC,uBAAyBzC,KAAK0C,oBAGrC,YAAAC,YAAP,WACE,OAAQ3C,KAAKc,QAUT,CAACd,KAAKiB,aAAcjB,KAAKmC,WATzB,CACEnC,KAAKiB,aACL,CACE2B,SAAS,EACTC,cAAe,IAAcC,MAC7BC,QAAQ,EACRC,UAAM9D,KAOT,YAAA+D,UAAP,sBACQrD,EAAUI,KAAKC,aACrB,OAAIL,EAAQwC,OAAwB,IAAhBxC,EAAQsD,KACrB,IAAIC,SAAQ,SAAAC,GAAW,SAAKC,uBAAL,OAGzB,YAAAC,aAAP,SAAoB,G,IAAE,QAAF,MAAuC,GAAE,GAAvCC,YAAI,IAAG,GAAK,EAChCvD,KAAKF,WAAY,EACjB,IAAMF,EAAUI,KAAKC,aAcrB,OAZED,KAAKoB,mBACJpB,KAAKwD,gBACLxD,KAAKO,OAAOkD,uBAEbzD,KAAKqD,yBAGFE,IAAQvD,KAAKc,SAChBd,KAAK0D,yBAGP1D,KAAKD,gBAAkBH,EAChBI,KAAKK,QAAQsD,KAAK3D,OAGpB,YAAAS,QAAP,WACET,KAAKsC,0BACLtC,KAAKuC,kBAAiB,UACfvC,KAAKe,SAAS6C,QAGhB,YAAA3D,WAAP,WACE,IAAML,EAAU,YAAMK,WAAU,WAkBhC,OAhBID,KAAKkB,cACPtB,EAAQlD,UAAY,2BACfkD,EAAQlD,WACRsD,KAAKkB,YAAYxE,WAEtBkD,EAAQC,QAAO,2BACVD,EAAQC,SACRG,KAAKkB,YAAYrB,UAKpBG,KAAKc,gBACAlB,EAAQwC,KAGVxC,GAGF,YAAA4D,aAAP,WACE,OAAOxD,KAAKH,SAAWG,KAAKH,QAAQgE,gBAU9B,YAAApB,oBAAR,WACQ,MAAgBzC,KAAKC,aAAnBiD,EAAG,MAAEd,EAAI,OACX0B,GAAsB,IAARZ,EACda,EAAgB/D,KAAKM,gBAAgBC,OAAOkD,sBAE5CO,EAAa,aACjBpB,SAAS,EACTC,cAAe,IAAcD,QAC7BG,QAAQ,EACRC,UAAM9D,EACN+E,OAAO,EACP1D,OAAQP,KAAKO,QACVP,KAAKkE,yBAKV,GAAIJ,IAAgB9D,KAAKwD,gBAAkBO,GAEzC,OADA/D,KAAKe,SAAS6C,OAASI,EAChBA,EAGT,GAAIhE,KAAKwD,eAAgB,CACvB,IAAMI,EAAS5D,KAAK0C,oBAAsBsB,EAI1C,OAHIJ,EAAOhB,UAAYR,GACrBpC,KAAKH,QAAQgE,eAAgBM,gBAAgBnE,MAAM,WAAM,eAEpD4D,IAIH,YAAAQ,8BAAR,WACE,IAAMxE,EAAUI,KAAKC,aACrBD,KAAKU,mBAAmBd,EAAQyC,MAAO,IAAahG,OACpD,IAAMgI,EAAczE,EAAQyE,aAAe,QAY3C,OAPErE,KAAKwD,gBACoB,iBAAxB5D,EAAQ0E,aACiB,sBAAxB1E,EAAQ0E,cAEV1E,EAAQ0E,YAAc,eAGxB,2BACK1E,GAAO,CACVyE,YAAW,EACXxE,QAASD,EAAQC,WAIb,YAAA0E,0BAAR,WAUE,GANIvE,KAAKwD,iBACPxD,KAAKoB,kBAAoBpB,KAAKH,QAASgE,eAAgBW,iBACrDxE,KAAKC,gBAIJD,KAAKoB,kBAAmB,CAC3B,IAAMqD,EAAyBzE,KAAKoE,gCAEpCpE,KAAKe,SAAS0D,uBAAsB,2BAC/BA,GAAsB,CACzBC,cAAU,IAEZ1E,KAAKoB,kBAAoBpB,KAAKM,gBAAgBC,OAAOoE,WAAU,eAC1DF,IAGDzE,KAAKwD,gBACPxD,KAAKH,QAASgE,eAAgBe,sBAC5B5E,KAAKoB,kBACLqD,KAMA,YAAAjC,sBAAR,WAEE,GAAKxC,KAAKoB,kBAAV,CAKA,IAAMyD,EAA4B,OAAH,IAAG,CAAH,eAC1B7E,KAAKoE,iCAA+B,CACvCM,cAAU,IAGR1E,KAAKC,aAAamC,KACpBpC,KAAKe,SAAS0D,uBAAyBI,EAKtC,YAAMA,EAA2B7E,KAAKe,SAAS0D,0BAEhDzE,KAAKe,SAAS0D,uBAAyBI,EACvC7E,KAAKoB,kBACFlB,WAAW2E,GAKXC,OAAM,qBAxBT9E,KAAKuE,6BAkCD,YAAAlB,uBAAR,SAA+BxC,GAA/B,gBAA+B,IAAAA,MAAwBb,KAAKa,WACtDb,KAAK+E,qBAAuB/E,KAAKC,aAAamC,OAElDpC,KAAK+E,oBAAsB/E,KAAKoB,kBAAmB4D,UAAU,CAC3D3F,KAAM,SAAC,G,IAAEuD,EAAO,UAAEC,EAAa,gBAAEG,EAAI,OAC7BiC,EAAiB,EAAKlE,SAAS6C,OAInCqB,GACAA,EAAerC,UAAYA,GAC3BqC,EAAepC,gBAAkBA,GACjC,YAAMoC,EAAejC,KAAMA,IAK7BnC,KAEFqE,MAAO,YAEL,GADA,EAAKC,sBACA,EAAMC,eAAe,iBAAkB,MAAM,EAElD,IAAMH,EAAiB,EAAKlE,SAAS6C,QAElCqB,GAAkBA,EAAerC,UACjC,YAAM,EAAO,EAAK7B,SAASmE,UAE5B,EAAKnE,SAASmE,MAAQ,EACtBrE,UAMA,YAAAsE,mBAAR,WACEnF,KAAKsC,0BASG,IAAAlB,EAAsBpB,KAAL,kBACzB,GAAIoB,EAAmB,CACrB,IAAMiE,EAAYjE,EAAkBkE,eAC9BC,EAAanE,EAAkBoE,gBACrCpE,EAAkBqE,mBAClBzF,KAAKqD,yBACLnF,OAAOwH,OAAOtE,EAAmB,CAC/BiE,UAAS,EACTE,WAAU,MAKR,YAAA7C,iBAAR,WACE,IAAIkB,EAAS5D,KAAKkE,wBACZtE,EAAUI,KAAKC,aAYrB,GAAIL,EAAQwC,KACVwB,EAAS,OAAH,IAAG,CAAH,eACDA,GAAM,CACTZ,UAAM9D,EACNgG,WAAOhG,EACP0D,SAAS,EACTC,cAAe,IAAcC,MAC7BC,QAAQ,SAEL,GAAI/C,KAAKoB,kBAAmB,CAEjC,IAAMuE,EAAgB3F,KAAKoB,kBAAkBwE,mBACrC5C,EAAkD2C,EAA9C,KAAE/C,EAA4C+C,EAArC,QAAEE,EAAmCF,EAA5B,QAAE9C,EAA0B8C,EAAb,cAAEG,EAAWH,EAAL,OAC/CT,EAAUS,EAAL,MAiBX,GAbIG,GAAUA,EAAOxI,OAAS,IAC5B4H,EAAQ,IAAI,IAAY,CAAEa,cAAeD,KAG3ClC,EAAS,OAAH,IAAG,CAAH,eACDA,GAAM,CACTZ,KAAI,EACJJ,QAAO,EACPC,cAAa,EACbqC,MAAK,EACLnC,QAAQ,IAGNH,QAEG,GAAIsC,EACThH,OAAOwH,OAAO9B,EAAQ,CACpBZ,MAAOhD,KAAKoB,kBAAkBoE,iBAAoB,IAC/CxC,WAEA,CACG,IAAAsB,EAAgBtE,KAAKoB,kBAAkBxB,QAA5B,YAEnB,GAD2BA,EAAL,gBAGpBiG,KACE7C,GAAqC,IAA7B9E,OAAO8H,KAAKhD,GAAM1F,SACZ,eAAhBgH,EAeA,OALApG,OAAOwH,OAAO9B,EAAQ,CACpBhB,SAAS,EACTC,cAAe,IAAcD,UAE/BgB,EAAOvC,UACAuC,GAKbA,EAAOrD,OAASP,KAAKO,OAErBP,KAAKE,WAAWN,GAAS,GAEzB,IAAMqF,EAAiBjF,KAAKe,SAAS6C,OAqBrC,OAnBA5D,KAAKe,SAAS6B,QACZqC,GAAkBA,EAAerC,UAAW,EAO9CgB,EAAOqC,aAAehB,IACnBA,EAAejC,MAAQiC,EAAegB,cAEzCjG,KAAKe,SAAS6C,OAASA,EAMvB5D,KAAKoB,mBAAqBpB,KAAKoB,kBAAkB8E,wBAE1CtC,GAGD,YAAAF,uBAAR,WACE,GAAK1D,KAAKoB,mBAAsBpB,KAAKe,SAAS6C,OAA9C,CAEM,MAA2B5D,KAAKe,SAAS6C,OAAvCZ,EAAI,OAAEJ,EAAO,UAAEsC,EAAK,QAE5B,IAAKtC,EAAS,CACN,MAMF5C,KAAKC,aALPoC,EAAK,QACL3F,EAAS,YACTyJ,EAAW,cACXC,EAAO,UACPhE,EAAI,OAIN,GACEpC,KAAKD,kBACJC,KAAKe,SAAS6B,SACf,YAAM5C,KAAKD,gBAAgBsC,MAAOA,IAClC,YAAMrC,KAAKD,gBAAgBrD,UAAWA,GAEtC,QAGEyJ,GAAgBjB,GAAU9C,EAEnBgE,GAAWlB,GACpBkB,EAAQlB,GAFRiB,EAAYnD,MAOV,YAAAV,wBAAR,WACMtC,KAAK+E,sBACP/E,KAAK+E,oBAAoBsB,qBAClBrG,KAAK+E,sBAIR,YAAAxC,iBAAR,SAAyB+D,GACnBtG,KAAKoB,oBACPpB,KAAKoB,kBAAL,gBACIkF,UACKtG,KAAKoB,oBAuCV,YAAA8C,sBAAR,W,MACE,MAAO,CACLxH,UAAiC,QAAtB,EAAAsD,KAAKoB,yBAAiB,eAAE1E,UACnC2E,QAASrB,KAAKmB,WACdK,UAAWxB,KAAKsB,aAChBK,YAAa3B,KAAKyB,eAClBK,aAAc9B,KAAK4B,gBACnBI,YAAahC,KAAK+B,eAClBG,gBAAiBlC,KAAKiC,qBAG5B,EAtfA,C,OAAkD,G,aCjB5C,SAAUsE,EACdlE,EACAzC,EACA2D,QAAA,IAAAA,OAAA,GAEA,IAAM1D,EAAU,qBAAW,eACrB,EAAsB,sBAAW,SAAA7C,GAAK,OAAAA,EAAA,IAAO,GAA5CwJ,EAAI,KAAEC,EAAW,KAClBC,EAAiB9G,EAAS,2BAAMA,GAAO,CAAEyC,MAAK,IAAK,CAAEA,MAAK,GAE1DsE,EAAe,mBACfC,EAAYD,EAAaE,UAC7BF,EAAaE,QAAU,IAAI,EAA6B,CACtDjH,QAAS8G,EACT7G,QAAO,EACPgB,UAAS,WACF+F,EAAUpD,eAWbiD,IAJAtD,QAAQC,UAAU0D,MAAK,WAAM,OAAAH,EAAaE,SAAWF,EAAaE,QAAQ/G,WAAa2G,WAU/FG,EAAU1G,WAAWwG,GACrBE,EAAU/G,QAAUA,EAKpB,IAUM+D,ECtDF,SACJmD,EACAC,GAEA,IAAMC,EAAM,mBAMZ,OAJKA,EAAIJ,SAAY,YAAMG,EAAKC,EAAIJ,QAAQG,OAC1CC,EAAIJ,QAAU,CAAEG,IAAG,EAAExH,MAAOuH,MAGvBE,EAAIJ,QAAQrH,MD4CJ0H,EACb,WAAM,OAAC3D,EAAOqD,EAAUjE,cAAgBiE,EAAlC,YAXK,CACXhH,QAAS,2BACJ8G,GAAc,CACjBN,aAAS,EACTD,iBAAa,IAEftG,QAAO,EACP2G,KAAI,IAQAW,EAAc5D,EACfK,EAAyC,GACzCA,EAuBL,OArBIwD,SE/DA,SAA8BC,GAClC,GAAID,QAAS,CACX,IAAM,EAAa,kBAAO,GAC1B,qBAAU,WACR,OAAO,WAEL,EAAWP,SAAU,KAEtB,IAEH,qBAAU,YACmB,IAAvB,EAAWA,UAEb,EAAWA,SAAU,EACrBQ,OAED,KFiDHC,CAAoBb,GAGtB,qBAAU,WACR,OAAO,WACLG,EAAUnG,UAGVkG,EAAaE,aAAU,KAExB,IAEH,qBAAU,WAAM,OAAAD,EAAUtD,aAAa,CAAEC,KAAzB,MAAkC,CAChD4D,EAAYvE,QACZuE,EAAYtE,cACZsE,EAAYjC,MACZiC,EAAYnE,OAGPY,I,6FG1FM,SAAS2D,EAAmB9J,GACzC,OCJa,SAA4BA,GACzC,GAAII,MAAMc,QAAQlB,GAAM,OAAO,OAAA+J,EAAA,GAAiB/J,GDGzC,CAAkBA,IELZ,SAA0BgK,GACvC,GAAsB,qBAAX7I,QAA0BA,OAAOC,YAAYX,OAAOuJ,GAAO,OAAO5J,MAAMW,KAAKiJ,GFIvD,CAAgBhK,IAAQ,OAAAiC,EAAA,GAA2BjC,IGLvE,WACb,MAAM,IAAIkC,UAAU,wIHIwE,K,iCID9F,+CAGM,SAAU+H,EACdrF,EACAzC,GAEA,OAAO,YAAgCyC,EAAOzC,GAAS,K,iKCKnD+H,EAAW,WACb,IAAMC,EAAWC,cACjB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,gBAE1CG,EAAkBC,YAAH,wOAUb3F,EAAY8E,YAASY,EAAgB,CACzChE,YAAa,eACb5H,UAAW,CACP8L,WAAYP,GAEhBpG,aAAc,KACduE,QAAS,SAAC3G,GACNgJ,QAAQC,IAAIjJ,IAEhB0G,YAAa,SAACnD,GACV,IACMvF,EADWkL,KAAKC,MAAMD,KAAKE,UAAU7F,IACtB8F,QAAQC,KAAI,SAAAC,GAC7B,MAAO,CAAEC,eAAMD,EAAIE,aAAcC,OAAQH,EAAII,QAASC,SAAUL,EAAIM,SAAWC,sBAAYP,EAAI7M,SAEnGyL,EAAS,CAACzL,KAAM,qBAAsBgM,aAAc1K,OAdpDmF,QAoCV,OACE,mCACI,eAAC,IAAD,WACI,eAAC,IAAD,wBAEI,6CAEJ,eAAC,IAAD,WACA,cAAC,IAAD,mCACA,cAAC,IAAD,CACI4G,oBAAuB,SAACC,QACVvK,IAANuK,GAAyB,KAANA,GACvBvB,EAASuB,IAEb7G,QAAWA,EACX8G,aAAW,EACXC,MAAOxB,EACPyB,OAxBG,CACX,eACA,SACA,WACA,uBAqBQC,aAAc,GACdC,YAAU,EACVC,YAAe,CACX,aACI,SAACC,EAAMC,GACP,OACI,oBAAIC,UAAU,OAAd,SACA,cAAC,IAAD,CACIC,MAAM,UACNC,QAAQ,UACRC,MAAM,SACNC,KAAK,KACLC,QAAS,YAhDf,SAACN,GACrB,IAAMO,EAAWzC,EAAQ0C,QAAQR,GAC7BS,EAAa3C,EAAQzJ,SACP,IAAdkM,EACFE,EAAWC,OAAOH,EAAU,GAE5BE,EAAU,sBAAO3C,GAAP,CAAgBkC,IAE5BjC,EAAW0C,GAwC6BE,CAAcX,IALhC,SAOKlC,EAAQ8C,SAASZ,GAAS,QAAU,wBAKjD,QACI,SAACD,EAAMC,GACH,OACA,cAAC,IAAD,CAAWa,KAAM/C,EAAQ8C,SAASZ,GAAlC,SACI,cAAC,IAAD,UACI,4BAAID,EAAKe,+BAa9BC,cAAMC,KAAKtD","file":"static/js/4.b1071fd0.chunk.js","sourcesContent":["import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  private currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (\n      this.currentObservable &&\n      !this.ssrInitiated() &&\n      !this.client.disableNetworkFetches\n    ) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const lastError = currentObservable.getLastError();\n      const lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError,\n        lastResult\n      });\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCollapse,\r\n  CLabel,\r\n  CDataTable\r\n} from '@coreui/react'\r\n\r\nimport { gql, useQuery } from '@apollo/client'\r\n\r\nimport \"./urunekle.css\"\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nconst UrunEkle = () => {\r\n    const dispatch = useDispatch()\r\n    const [details, setDetails] = useState([])\r\n    const [input, setInput] = useState(\"mo\")\r\n    const medicineList = useSelector(state => state.medicineList)\r\n\r\n    const GET_SEARCH_LIST = gql`\r\n        query($inputField: String!) {\r\n        product(searchCriteria: $inputField) {\r\n            Product_name\r\n            Barcode\r\n            ATC_code\r\n            type\r\n            }\r\n        }\r\n    `\r\n    const { loading } = useQuery(GET_SEARCH_LIST,{\r\n        fetchPolicy: \"network-only\",\r\n        variables: {\r\n            inputField: input\r\n        },\r\n        pollInterval: 1500,\r\n        onError: (err) => {\r\n            console.log(err)\r\n        },\r\n        onCompleted: (data) => {\r\n            const dataCopy = JSON.parse(JSON.stringify(data))\r\n            const arr = dataCopy.product.map(obj => {\r\n                return { İlaç: obj.Product_name, barKod: obj.Barcode, ATC_Kodu: obj.ATC_code , reçeteTürü: obj.type }\r\n            })\r\n            dispatch({type: \"FILL_MEDICINE_LIST\", medicineList: arr})\r\n        }\r\n    })\r\n  \r\n    const toggleDetails = (index) => {\r\n      const position = details.indexOf(index)\r\n      let newDetails = details.slice()\r\n      if (position !== -1) {\r\n        newDetails.splice(position, 1)\r\n      } else {\r\n        newDetails = [...details, index]\r\n      }\r\n      setDetails(newDetails)\r\n    }\r\n\r\n    const fields = [\r\n        'İlaç',\r\n        'barKod',\r\n        'ATC_Kodu',\r\n        'reçeteTürü'\r\n     ]\r\n\r\n  return (\r\n    <>\r\n        <CCard>\r\n            <CCardHeader>\r\n                Ürün\r\n                <small> ekle</small>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n            <CLabel>ÜRÜN SORGULAMA</CLabel>\r\n            <CDataTable\r\n                onTableFilterChange = {(e) => {\r\n                    if (e === undefined || e === \"\") return\r\n                    setInput(e)\r\n                }}\r\n                loading = {loading}\r\n                tableFilter\r\n                items={medicineList}\r\n                fields={fields}\r\n                itemsPerPage={15}\r\n                pagination\r\n                scopedSlots = {{\r\n                    'show_details':\r\n                        (item, index)=>{\r\n                        return (\r\n                            <td className=\"py-2\">\r\n                            <CButton\r\n                                color=\"primary\"\r\n                                variant=\"outline\"\r\n                                shape=\"square\"\r\n                                size=\"sm\"\r\n                                onClick={()=>{toggleDetails(index)}}\r\n                            >\r\n                                {details.includes(index) ? 'Sakla' : 'Açıklama'}\r\n                            </CButton>\r\n                            </td>\r\n                            )\r\n                        },\r\n                    'details':\r\n                        (item, index)=>{\r\n                            return (\r\n                            <CCollapse show={details.includes(index)}>\r\n                                <CCardBody>\r\n                                    <b>{item.description}</b>\r\n                                </CCardBody>\r\n                            </CCollapse>\r\n                            )\r\n                        }\r\n                    }}\r\n            />\r\n            </CCardBody>\r\n        </CCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(UrunEkle)\r\n"],"sourceRoot":""}