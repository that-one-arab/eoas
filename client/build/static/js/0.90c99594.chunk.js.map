{"version":3,"sources":["../../../../src/react/parser/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../../src/react/data/OperationData.ts","../../../../src/react/data/QueryData.ts","../../../../../src/react/hooks/utils/useBaseQuery.ts","../../../../../src/react/hooks/utils/useDeepMemo.ts","../../../../../src/react/hooks/utils/useAfterFastRefresh.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/modals/Modal.js","routes/tables/CollapseMine.js","routes/tables/CollapseJoin.js","routes/tables/index.js","../../../../src/react/hooks/useQuery.ts","../../../../src/react/data/MutationData.ts","../../../../src/react/hooks/useMutation.ts"],"names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","definition","_arrayLikeToArray","arr","len","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","from","test","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError","options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","requiredOperationName","usedOperationName","onNewData","runLazy","previous","create","runLazyQuery","lazyOptions","obsRefetch","currentObservable","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","query","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","executeLazy","loading","networkStatus","ready","called","data","fetchData","ssr","Promise","resolve","startQuerySubscription","afterExecute","lazy","ssrInitiated","disableNetworkFetches","handleErrorOrCompleted","bind","result","renderPromises","ssrDisabled","fetchDisabled","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","displayName","fetchPolicy","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","currentSubscription","subscribe","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","assign","currentResult","getCurrentResult","partial","errors","graphQLErrors","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","then","memoFn","key","ref","useDeepMemo","queryResult","__DEV__","effectFn","useAfterFastRefresh","_toConsumableArray","arrayLikeToArray","iter","Modal","props","dispatch","show","on","onClose","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","CollapseMineTable","item","state","durum","className","katÄ±lanlar","map","element","backgroundColor","rows","clicked","id","disabled","isNotPending","onChange","e","target","pledge","hedef","CollapseMine","useReducer","reducer","initialState","mainDispatch","useDispatch","modal","REMOVE_BID","gql","useMutation","applicationID","ID","console","log","removeBid","APPROVE_APPLICATION","bakiye","Number","approveApplication","specialField","useEffect","borderTop","row","xs","md","htmlFor","description","readOnly","isOnHold","display","justifyContent","fontSize","hedefeKalanIs0","hedefeKalanMine","selectedUsers","chosenJoiners","CollapseJoinTables","isCurrentUser","CollapseJoin","reduxUser","order","setOrder","total","bakiyeSonra","isLoading","DELETE_JOIN","deleteJoin","JOIN_APPLICATON","joinApplication","itemCopy","JSON","parse","stringify","Loader","hedefeKalanJoin","marginLeft","placeholder","toFixed","isBelow0","totalPledges","userDynamicInput","input","balanceAfterPurchase","pickedRows","isCollapsed","isloading","action","index","findIndex","newArray","pickedRowsCopy","idxToRemove","splice","index_join","newArray_join","posterPledgeMine","hedefMine","toplamHedefMine","reduce","accumulator","posterPledgeJoin","hedefJoin","toplamHedefJoin","number","fields","_style","width","label","sorter","getBadge","status","getStatus","getCondition","toggleDetails","details","setDetails","setTotal","setBakiyeSonra","position","indexOf","newDetails","whichCollapsedToRender","dataUser","useQuery","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","mostRecentMutationId","ignoreResults","updateResult","isMostRecentMutation","OperationData","mutationDataRef","mutationData"],"mappings":"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","file":"static/js/0.90c99594.chunk.js","sourcesContent":["import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  private currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (\n      this.currentObservable &&\n      !this.ssrInitiated() &&\n      !this.client.disableNetworkFetches\n    ) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const lastError = currentObservable.getLastError();\n      const lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError,\n        lastResult\n      });\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useEffect, useRef } from \"react\";\n\n/**\n * This hook allows running a function only immediately after a react\n * fast refresh or live reload.\n *\n * Useful in order to ensure that we can reinitialize things that have been\n * disposed by cleanup functions in `useEffect`.\n * @param effectFn a function to run immediately after a fast refresh\n */\nexport function useAfterFastRefresh(effectFn: () => unknown) {\n  if (__DEV__) {\n    const didRefresh = useRef(false);\n    useEffect(() => {\n      return () => {\n        // Detect fast refresh, only runs multiple times in fast refresh\n        didRefresh.current = true;\n      };\n    }, []);\n\n    useEffect(() => {\n      if (didRefresh.current === true) {\n        // This block only runs after a fast refresh\n        didRefresh.current = false;\n        effectFn();\n      }\n    }, [])\n  }\n}\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch) {\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    } else {\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal","import React, {useReducer, useEffect} from \"react\";\r\nimport { CFormGroup, CCol, CTextarea, CLabel, CButton, CBadge, CCardBody } from \"@coreui/react\";\r\nimport { initialState, reducer } from \".\";\r\nimport \"./style.css\"\r\nimport \"./collapsed.css\"\r\nimport Modal from \"../../components/modals/Modal\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nfunction CollapseMineTable({item, state, dispatch}) {\r\n    switch (item.durum) {\r\n        case \"APPROVED\":\r\n            return (\r\n                <table className = \"table table-striped collapsedMine-table\">\r\n                    <tbody>\r\n                        {\r\n                        item.katÄ±lanlar && item.katÄ±lanlar.map((element, i) => {\r\n                    return <tr key = {i} style = {{backgroundColor: state.rows[i]?.clicked? \"rgba(18, 54, 216, 0.514)\" : \"\", color: \"black\"}} >\r\n                                <td>\r\n                                    <input type=\"checkbox\" id='joiner1' name={element.name} disabled = {state.isNotPending}\r\n                                    onChange = {(e) => {\r\n                                        dispatch({type: \"TOGGLE_ECZANE\", payload: e.target.name})\r\n                                        dispatch({type: \"HEDEF_HESAPLA_COLLAPSED_MINE\", payload: item.pledge, hedef: item.hedef})\r\n                                    }} />\r\n                                </td>\r\n                                <td><label><b>{element.name}</b></label></td>\r\n                                <td><h5>{element.pledge} / {item.hedef}</h5></td>\r\n                            </tr>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                )\r\n        default:\r\n            return (\r\n                <table className = \"table table-striped collapsedMine-table\">\r\n                    <tbody>\r\n                        {\r\n                        item.katÄ±lanlar && item.katÄ±lanlar.map((element, i) => {\r\n                    return <tr key = {i} style = {{backgroundColor: state.rows[i]?.clicked? \"rgba(18, 54, 216, 0.514)\" : \"\", color: \"black\"}} >\r\n                                <td>\r\n                                    <input type=\"checkbox\" id='joiner1' name={element.name} disabled = {state.isNotPending}\r\n                                    onChange = {(e) => {\r\n                                        dispatch({type: \"TOGGLE_ECZANE\", payload: e.target.name})\r\n                                        dispatch({type: \"HEDEF_HESAPLA_COLLAPSED_MINE\", payload: item.pledge, hedef: item.hedef})\r\n                                    }} />\r\n                                </td>\r\n                                <td><label><b>{element.name}</b></label></td>\r\n                                <td><h5>{element.pledge} / {item.hedef}</h5></td>\r\n                            </tr>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                )\r\n        }\r\n}\r\n\r\nfunction CollapseMine ({item, refetch}) {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const mainDispatch = useDispatch()\r\n    const { modal } = state\r\n    const REMOVE_BID = gql`\r\n    mutation ($applicationID: ID) {\r\n        deleteApplication(applicationID: $applicationID) {\r\n            application_id\r\n        }\r\n    }\r\n    `;\r\n    const [removeBid] = useMutation(REMOVE_BID, {\r\n        fetchPolicy: \"no-cache\",\r\n        variables: {applicationID: item.ID},\r\n        onError: (error) => {\r\n            mainDispatch({type: \"TOGGLE_LOADING_FALSE\"})\r\n            dispatch({type: \"MODAL_DISPLAY\", payload : {type: \"FAILURE\"}})\r\n            console.log(error)\r\n        },\r\n        onCompleted: (data) => {\r\n            console.log(data)\r\n            refetch()\r\n            mainDispatch({type: \"TOGGLE_LOADING_FALSE\"})\r\n            dispatch({type: \"MODAL_DISPLAY\", payload : {type: \"SUCCESS\"}})\r\n        }\r\n    })\r\n\r\n    const APPROVE_APPLICATION = gql`\r\n        mutation($applicationID: ID!, $chosenJoiners: [JoinerArg]!) {\r\n            approveApplication(applicationID: $applicationID, chosenJoiners: $chosenJoiners) {\r\n                application_id\r\n                specialField\r\n            }\r\n        }\r\n    `;\r\n    const [approveApplication] = useMutation(APPROVE_APPLICATION, {\r\n        fetchPolicy: \"no-cache\",\r\n        variables: {applicationID: item.ID},\r\n        onError: (error) => {\r\n            mainDispatch({type: \"TOGGLE_LOADING_FALSE\"})\r\n            dispatch({type: \"MODAL_DISPLAY\", payload : {type: \"FAILURE\"}})\r\n            console.log(error)\r\n        },\r\n        onCompleted: (data) => {\r\n            mainDispatch({type: \"TOGGLE_LOADING_FALSE\"})\r\n            mainDispatch({type: \"FILL_USER_INFO\", bakiye: Number(data.approveApplication.specialField)})\r\n            dispatch({type: \"MODAL_DISPLAY\", payload : {type: \"SUCCESS\"}})\r\n            refetch()\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (item.katÄ±lanlar) {\r\n            const { katÄ±lanlar } = item\r\n            for (let i = 0 ; i < item.katÄ±lanlar.length; i++) {\r\n                dispatch({type: \"ADD_ROW\", payload: {...katÄ±lanlar[i], clicked: false}})\r\n            }\r\n        }\r\n        // console.log('dispatch args are: ', item.pledge, item.hedef)\r\n        dispatch({type: \"HEDEF_HESAPLA_COLLAPSED_MINE\", payload: item.pledge, hedef: item.hedef})\r\n        dispatch({type: \"SET_STATUS\", payload: item.durum})\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Modal on = {modal.on} header = {modal.header} body = {modal.body} color = {modal.color} dispatch = {dispatch} />\r\n            <CCardBody style = {{backgroundColor: \"rgb(69, 70, 79, 0.02)\", borderTop: \"1px solid grey\"}} >\r\n                <CFormGroup row>\r\n                    <CCol xs=\"12\" md=\"6\">\r\n                        <CLabel htmlFor=\"textarea-input\">AÃ§Ä±klamanÄ±z:</CLabel>\r\n                        <CTextarea \r\n                            name=\"textarea-input\" \r\n                            id=\"textarea-input\" \r\n                            rows=\"7\"\r\n                            value = {item.description}\r\n                            readOnly\r\n                        />\r\n                        {\r\n                            state.isOnHold &&\r\n                            <div style = {{display: \"flex\", justifyContent: \"space-around\"}} >\r\n                                <h5 className = \"\"> <CBadge color = \"secondary\" style = {{fontSize : \"15px\"}} > Hedefe kalan adet:</CBadge></h5>\r\n                                <h4 className = {`collapsedMine-hedefeKalanH4 ${state.hedefeKalanIs0 ? \"hedefeKalanIs0\" : \"\"}`}>{state.hedefeKalanMine}</h4>\r\n                            </div>\r\n                        }\r\n                    </CCol>\r\n                    <CCol xs=\"12\" md=\"6\">\r\n                        <CLabel>KatÄ±lanlar:</CLabel>\r\n                        <CollapseMineTable item = {item} state = {state} dispatch = {dispatch}  />\r\n                    </CCol>\r\n                </CFormGroup>\r\n            </CCardBody>\r\n            {\r\n            state.isOnHold && \r\n            <CFormGroup row className = \"collapsedMine-footerControlButtons\" id = \"collapsedMine-footer\">\r\n                <CButton color = \"danger\" onClick = {() => {\r\n                    mainDispatch({type: \"TOGGLE_LOADING_TRUE\"})\r\n                    removeBid()\r\n                    }} >Teklifi sil</CButton>\r\n                <CButton disabled = {!state.hedefeKalanIs0} color = \"success\" onClick = {() => {\r\n                    let selectedUsers = []\r\n                    for (let i = 0; i < state.rows.length; i++) {\r\n                        if (state.rows[i].clicked === true) {\r\n                            selectedUsers.push({name: state.rows[i].name, pledge: state.rows[i].pledge})\r\n                        }\r\n                    }\r\n                    approveApplication({variables: {chosenJoiners: selectedUsers}})\r\n                    }} >Onayla</CButton>\r\n            </CFormGroup>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CollapseMine","import React, {useReducer, useEffect} from \"react\";\r\nimport { CFormGroup, CCol, CTextarea, CLabel, CButton, CInput, CBadge, CCardBody } from \"@coreui/react\";\r\nimport { gql, useMutation } from \"@apollo/client\"\r\nimport Loader from \"../../hoc/loader/Loader\";\r\nimport { isBelow0, initialState, reducer } from \".\";\r\nimport \"./style.css\"\r\nimport \"./collapsed.css\"\r\nimport Modal from \"../../components/modals/Modal\";\r\n\r\nfunction CollapseJoinTables ({item, state, dispatch}) {\r\n    switch (item.durum) {\r\n        case \"APPROVED\":\r\n            return (\r\n                <table className = \"table table-striped collapsedMine-table\">\r\n                    <tbody>\r\n                        {\r\n                        item.katÄ±lanlar && item.katÄ±lanlar.map((element, i) => {\r\n                    return <tr key = {i} style = {{backgroundColor: state.rows[i]?.clicked? \"rgba(18, 54, 216, 0.514)\" : \"\", color: \"black\"}} >\r\n                                { state.isNotPending && element.isCurrentUser ?\r\n                                    <td>\r\n                                        <input type=\"checkbox\" id='joiner1' name={element.name}\r\n                                        onChange = {(e) => {\r\n                                            console.log(\"TOGGLE ECZANE DISPATCH\", e.target.name)\r\n                                            dispatch({type: \"TOGGLE_ECZANE\", payload: e.target.name})\r\n                                        }} />\r\n                                    </td>\r\n                                    :\r\n                                    <td>\r\n                                        <input type=\"checkbox\" id='joiner1' name={element.name} disabled />\r\n                                    </td>\r\n                                }\r\n                                <td><label htmlFor = \"joiner1\"><b>{element.name}</b></label></td>\r\n                                <td><h5>{element.pledge} / {item.hedef}</h5></td>\r\n                            </tr>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                )           \r\n        default:\r\n            return (\r\n                <table className = \"table table-striped collapsedMine-table\">\r\n                    <tbody>\r\n                        {\r\n                        item.katÄ±lanlar && item.katÄ±lanlar.map((element, i) => {\r\n                    return <tr key = {i} style = {{backgroundColor: state.rows[i]?.clicked? \"rgba(18, 54, 216, 0.514)\" : \"\", color: \"black\"}} >\r\n                                { state.isNotPending && element.isCurrentUser ?\r\n                                    <td>\r\n                                        <input type=\"checkbox\" id='joiner1' name={element.name}\r\n                                        onChange = {(e) => {\r\n                                            dispatch({type: \"TOGGLE_ECZANE\", payload: e.target.name})\r\n                                        }} />\r\n                                    </td>\r\n                                    :\r\n                                    <td>\r\n                                        <input type=\"checkbox\" id='joiner1' name={element.name} disabled />\r\n                                    </td>\r\n                                }\r\n                                <td><label htmlFor = \"joiner1\"><b>{element.name}</b></label></td>\r\n                                <td><h5>{element.pledge} / {item.hedef}</h5></td>\r\n                            </tr>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            )    \r\n    }\r\n}\r\n\r\nfunction CollapseJoin ({ reduxUser, item, order, setOrder, total, bakiyeSonra, refetch}) {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const { modal, isLoading } = state;\r\n    const DELETE_JOIN = gql`\r\n        mutation($applicationID: ID) {\r\n            deleteJoin(applicationID: $applicationID) {\r\n                application_id\r\n            }\r\n        }\r\n    `;\r\n    const [deleteJoin] = useMutation(DELETE_JOIN, {\r\n        fetchPolicy: \"no-cache\",\r\n        variables: {applicationID: item.ID},\r\n        onError: (err) => {\r\n            console.log(err)\r\n            dispatch({type: \"MODAL_DISPLAY\", payload: {type: \"FAILURE\"}})\r\n            dispatch({type: \"APPROVE_BID\", payload : {type: \"LOADING_OFF\"}})\r\n        },\r\n        onCompleted: (data) => {\r\n            console.log(data)\r\n            dispatch({type: \"MODAL_DISPLAY\", payload: {type: \"SUCCESS\"}})\r\n            dispatch({type: \"APPROVE_BID\", payload : {type: \"LOADING_OFF\"}})\r\n            refetch()\r\n        }\r\n    })\r\n    const JOIN_APPLICATON = gql`\r\n        mutation($applicationID: ID!, $pledge: Int!) {\r\n            joinApplication(applicationID: $applicationID, pledge: $pledge) {\r\n                application_id\r\n            }\r\n        }\r\n    `;\r\n    const [joinApplication] = useMutation(JOIN_APPLICATON, {\r\n        fetchPolicy: \"no-cache\",\r\n        variables: {\r\n            applicationID: item.ID,\r\n            pledge: Number(order)\r\n        },\r\n        onError: (err) => {\r\n            console.log(err)\r\n            dispatch({type: \"MODAL_DISPLAY\", payload: {type: \"FAILURE\"}})\r\n            dispatch({type: \"APPROVE_BID\", payload : {type: \"LOADING_OFF\"}})\r\n        },\r\n        onCompleted: (data) => {\r\n            console.log(data)\r\n            refetch()\r\n            dispatch({type: \"MODAL_DISPLAY\", payload: {type: \"SUCCESS\"}})\r\n            dispatch({type: \"APPROVE_BID\", payload : {type: \"LOADING_OFF\"}})\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (item.katÄ±lanlar) {\r\n            const itemCopy = JSON.parse(JSON.stringify(item));\r\n            for (let i = 0; i < itemCopy.katÄ±lanlar.length; i++) {\r\n                if (itemCopy.katÄ±lanlar[i].name === reduxUser) {\r\n                    Object.assign(itemCopy.katÄ±lanlar[i], {isCurrentUser: true})\r\n                }\r\n                dispatch({type: \"ADD_ROW\", payload: {...itemCopy.katÄ±lanlar[i], clicked: false}})\r\n            }\r\n        }\r\n        dispatch({type: \"HEDEF_HESAPLA_COLLAPSED_JOIN\", payload: item.pledge, hedef: item.hedef, ID: item.ID})\r\n        dispatch({type: \"SET_STATUS\", payload: item.durum})\r\n        //eslint-disable-next-line\r\n    }, [item])\r\n\r\n    return (\r\n        <Loader isLoading = {isLoading} >\r\n            <CCardBody id = \"collapsedJoin-bodyMain\">\r\n                <Modal on = {modal.on} header = {modal.header} body = {modal.body} color = {modal.color} dispatch = {dispatch} />\r\n                <CFormGroup row>\r\n                    <CCol xs=\"12\" md=\"6\">\r\n                        <CLabel htmlFor=\"textarea-input\">AÃ§Ä±klama:</CLabel>\r\n                        <CTextarea \r\n                            name=\"textarea-input\" \r\n                            id=\"textarea-input\" \r\n                            rows=\"7\"\r\n                            value = {item.description}\r\n                            readOnly\r\n                        />\r\n                        {\r\n                            state.isOnHold &&\r\n                            <div id = \"collapsedJoin-remainingGoal\">\r\n                                <h5>\r\n                                    <CBadge color = \"secondary\" style = {{fontSize : \"15px\"}} > Hedefe kalan adet: </CBadge>\r\n                                </h5>\r\n                                <h4 className = {`collapsedMine-hedefeKalanH4 ${state.hedefeKalanIs0 ? \"hedefeKalanIs0\" : \"\"}`}>{state.hedefeKalanJoin}</h4>\r\n                            </div>\r\n                        }\r\n                    </CCol>\r\n                    <CCol xs=\"12\" md=\"6\">\r\n                        <CLabel>KatÄ±lanlar:</CLabel>\r\n                        <CollapseJoinTables item = {item} state = {state} dispatch = {dispatch} />\r\n                        {\r\n                            state.isOnHold &&\r\n                            <div id = \"collapsedJoin-inputDiv\">\r\n                                <h5 style = {{marginLeft: \"15px\"}} >Siz</h5>\r\n                                <CInput id = \"collapsedJoin-inputField\" type=\"number\" placeholder=\"Ã¶rnek: 15\" \r\n                                onChange = {e => {\r\n                                    setOrder(e.target.value)\r\n                                }} />\r\n                            </div>\r\n                        }\r\n                    </CCol>\r\n                </CFormGroup>\r\n            </CCardBody>\r\n            {\r\n            state.isOnHold &&\r\n            <CFormGroup row id = \"collapsedJoin-footer\" className = \"justify-content-between\" >\r\n                <CCol md = \"4\">\r\n                    <span className = \"collapsedJoiner-footerInfo\">\r\n                        <CLabel>Toplam:</CLabel>\r\n                        <p style = {{marginLeft: \"10px\"}}> <b> {total.toFixed(2)} TL</b></p>\r\n                    </span>\r\n                    <span className = \"collapsedJoiner-footerInfo\">\r\n                        <CLabel>SipraiÅten Sonra Bakiyeniz:</CLabel>\r\n                        <p style = {{marginLeft: \"10px\", color: isBelow0(bakiyeSonra) }}>{bakiyeSonra.toFixed(2)} TL</p>\r\n                    </span>\r\n                </CCol>\r\n                <CCol md = \"3\">\r\n                    <CButton color = \"danger\" className = \"btn-ghost-danger\" onClick = {() => {\r\n                        dispatch({type: \"APPROVE_BID\", payload : {type: \"LOADING_ON\"}})\r\n                        deleteJoin()\r\n                        }} >SIL</CButton>\r\n                    <CButton color = \"success\" onClick = {() => {\r\n                            dispatch({type: \"APPROVE_BID\", payload : {type: \"LOADING_ON\"}})\r\n                            joinApplication()\r\n                        }} >ONAYLA</CButton>\r\n                </CCol>\r\n            </CFormGroup>\r\n            }\r\n        </Loader>\r\n    )\r\n}\r\n\r\nexport default CollapseJoin","import CollapseMine from \"./CollapseMine\"\r\nimport CollapseJoin from \"./CollapseJoin\"\r\n\r\nexport const initialState = {\r\n  rows: [],\r\n  totalPledges: 0,\r\n  hedefeKalanMine: 0,\r\n  hedefeKalanJoin: 0,\r\n  userDynamicInput: {\r\n    input: 0,\r\n    total: 0,\r\n    balanceAfterPurchase: 0\r\n  },\r\n  hedefeKalanIs0: false,\r\n  pickedRows: [],\r\n  isCollapsed: false,\r\n  isOnHold: false,\r\n  isloading: false,\r\n  modal: {\r\n    on: false,\r\n    header: \"\",\r\n    body: \"\",\r\n    color: \"\"\r\n  },\r\n  isNotPending: false\r\n}\r\n\r\nexport function reducer (state, action) {\r\n  switch(action.type) {\r\n    \r\n    case \"TOGGLE_ECZANE\":\r\n      const index = state.rows.findIndex(row => row.name ===action.payload)\r\n      const newArray = [...state.rows]\r\n      newArray[index].clicked = !state.rows[index].clicked\r\n\r\n      if (newArray[index].clicked === true) {\r\n        return {\r\n          ...state,\r\n          rows: newArray,\r\n          pickedRows: [\r\n            ...state.pickedRows,\r\n            newArray[index]\r\n          ]\r\n        }\r\n      } else {\r\n        const pickedRowsCopy = state.pickedRows\r\n        const idxToRemove = pickedRowsCopy.findIndex(row => row.name ===action.payload)\r\n        pickedRowsCopy.splice(idxToRemove, 1)\r\n        return {\r\n          ...state,\r\n          rows: newArray,\r\n          pickedRows: pickedRowsCopy\r\n        }\r\n      }\r\n    case \"TOGGLE_ECZANE_JOIN\":\r\n      const index_join = state.rows.findIndex(row => row.name ===action.payload)\r\n      console.log(\"index: \", index_join);\r\n      const newArray_join = [...state.rows]\r\n      console.log(\"newArray: \", newArray_join);\r\n      newArray[index].clicked = !state.rows[index].clicked\r\n\r\n      if (newArray[index].clicked === true) {\r\n        return {\r\n          ...state,\r\n          rows: newArray,\r\n          pickedRows: [\r\n            ...state.pickedRows,\r\n            newArray[index]\r\n          ]\r\n        }\r\n      } else {\r\n        const pickedRowsCopy = state.pickedRows\r\n        const idxToRemove = pickedRowsCopy.findIndex(row => row.name ===action.payload)\r\n        pickedRowsCopy.splice(idxToRemove, 1)\r\n        return {\r\n          ...state,\r\n          rows: newArray,\r\n          pickedRows: pickedRowsCopy\r\n        }\r\n      }\r\n\r\n    case \"ADD_ROW\":\r\n      return {\r\n        ...state,\r\n        rows: [\r\n          ...state.rows,\r\n          action.payload\r\n        ]\r\n      }\r\n    \r\n    case \"HEDEF_HESAPLA_COLLAPSED_MINE\":\r\n      const posterPledgeMine = action.payload\r\n      const hedefMine = action.hedef\r\n      const toplamHedefMine = state.pickedRows.reduce((accumulator, current) => accumulator + current.pledge, posterPledgeMine);\r\n      const hedefeKalanMine = hedefMine - toplamHedefMine\r\n      if (hedefeKalanMine === 0) {\r\n        return {\r\n          ...state,\r\n          totalPledges: toplamHedefMine,\r\n          hedefeKalanMine: hedefeKalanMine,\r\n          hedefeKalanIs0: true\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          totalPledges: toplamHedefMine,\r\n          hedefeKalanMine: hedefeKalanMine,\r\n          hedefeKalanIs0: false\r\n        }\r\n      }\r\n\r\n    case \"HEDEF_HESAPLA_COLLAPSED_JOIN\":\r\n      const posterPledgeJoin = action.payload\r\n      const hedefJoin = action.hedef\r\n      const toplamHedefJoin = state.rows.reduce((accumulator, current) => accumulator + current.pledge, posterPledgeJoin);\r\n      const hedefeKalanJoin = hedefJoin - toplamHedefJoin\r\n      if (hedefeKalanJoin === 0) {\r\n        return {\r\n          ...state,\r\n          totalPledges: toplamHedefJoin,\r\n          hedefeKalanJoin: hedefeKalanJoin,\r\n          hedefeKalanIs0: true\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          totalPledges: toplamHedefJoin,\r\n          hedefeKalanJoin: hedefeKalanJoin,\r\n          hedefeKalanIs0: false\r\n        }\r\n      }\r\n\r\n    // case \"HEDEFE_EKLE_INPUT_COLLAPSED_JOIN\":\r\n    //   const input = action.payload;\r\n    //   if (typeof input === \"string\") {\r\n    //     if (input === \"\") {\r\n    //       return {\r\n    //         ...state,\r\n    //         userDynamicInput: {\r\n    //           input: 0,\r\n    //           total: 0,\r\n    //           balanceAfterPurchase: 0\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //     let parsedInput = parseInt(input)\r\n    //     return {\r\n    //       ...state,\r\n    //       userDynamicInput: {\r\n    //         input: parsedInput,\r\n    //         total: 0,\r\n    //         balanceAfterPurchase: 0\r\n    //       }\r\n    //     }\r\n    //   } else {\r\n    //     return {\r\n    //       ...state,\r\n    //       userDynamicInput: {\r\n    //         input: input,\r\n    //         total: 0,\r\n    //         balanceAfterPurchase: 0\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    case \"SET_STATUS\":\r\n      switch (action.payload) {\r\n        case \"APPROVED\":\r\n          return {\r\n            ...state,\r\n            isOnHold: false,\r\n            isNotPending: true\r\n          }\r\n        case \"ON_HOLD\":\r\n          return {\r\n            ...state,\r\n            isOnHold: true\r\n          }\r\n        default:\r\n          return state\r\n\r\n      }\r\n\r\n    case \"APPROVE_BID\":\r\n      switch (action.payload.type) {\r\n        case \"LOADING_ON\":\r\n          return {\r\n            ...state,\r\n            isloading: true\r\n          }\r\n        case \"LOADING_OFF\":\r\n          return {\r\n            ...state,\r\n            isloading: false\r\n          }\r\n        default:\r\n          return\r\n      }\r\n\r\n    case \"MODAL_DISPLAY\":\r\n      switch (action.payload.type) {\r\n        case \"SUCCESS\":\r\n          return {\r\n            ...state,\r\n            modal: {\r\n              ...state.modal,\r\n              on: true,\r\n              header: \"BAÅARILI\",\r\n              body: \"DeÄiÅikleriniz BaÅarÄ±yla TamamlanmÄ±ÅtÄ±r\",\r\n              color: \"success\"\r\n            }\r\n          }\r\n        case \"FAILURE\":\r\n          return {\r\n            ...state,\r\n            modal: {\r\n              ...state.modal,\r\n              on: true,\r\n              header: \"HATA\",\r\n              body: \"Bir Hata OlmuÅtur, lÃ¼tfen daha sonra tekrar deneyin\",\r\n              color: \"danger\"\r\n            }\r\n          }\r\n        case \"CLOSE\":\r\n          return {\r\n            ...state,\r\n            modal: {\r\n              ...state.modal,\r\n              on: false,\r\n              header: \"\",\r\n              body: \"\",\r\n              color: \"\"\r\n            }\r\n          }\r\n      \r\n        default:\r\n          return;\r\n      }\r\n  \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// checks if number is below 0, returns a string, I used it for color styling\r\nexport function isBelow0 (number) {\r\n  if (number < 0) {\r\n    return \"red\"\r\n  } else {\r\n    return \"green\"\r\n  }\r\n}\r\n\r\nexport const fields = [\r\n  {key: 'ID',  _style: { width: '5%'} },\r\n  { key: 'eczane', _style: { width: '10%'} },\r\n  { key: 'Ä°laÃ§', _style: { width: '30%'} },\r\n  'hedef',\r\n  'birimFiyat',\r\n  'kampanya',\r\n  'sonTarih',\r\n  'durum',\r\n  {\r\n    key: 'show_details',\r\n    label: '',\r\n    _style: { width: '1%' },\r\n    sorter: false,\r\n    filter: false\r\n  }\r\n]\r\n\r\nexport function getBadge (status) {\r\n  switch (status) {\r\n    case 'APPROVED': return 'success'\r\n    case 'Inactive': return 'secondary'\r\n    case 'ON_HOLD': return 'warning'\r\n    case 'Banned': return 'danger'\r\n    default: return 'primary'\r\n  }\r\n}\r\n\r\nexport function getStatus (status) {\r\n  switch (status) {\r\n    case 'ON_HOLD': return 'Beklemede'\r\n    case 'APPROVED': return 'TamamlandÄ±'\r\n    default: return status\r\n  }\r\n}\r\n\r\nexport function getCondition (status) {\r\n  switch (status) {\r\n    case 'NONE': return <p>Yok</p>\r\n    default: return <p style = {{color: \"\t#321fdb\"}}> {status} </p>\r\n  }\r\n}\r\n\r\nexport function toggleDetails(index, details, setDetails, setOrder, setTotal, setBakiyeSonra) {\r\n    const position = details.indexOf(index)\r\n    let newDetails = details.slice()\r\n    if (position !== -1) {\r\n        newDetails.splice(position, 1)\r\n    } else {\r\n        setOrder(0);\r\n        setTotal(0);\r\n        setBakiyeSonra(0);\r\n        newDetails = [index]\r\n    }\r\n    setDetails(newDetails)\r\n  }\r\n\r\nexport function whichCollapsedToRender (reduxUser, dataUser, item, index, order, setOrder, total, bakiyeSonra, refetch) {\r\n  if (reduxUser === dataUser) {\r\n    return <CollapseMine item = {item} refetch = {refetch} />\r\n  } else {\r\n    return <CollapseJoin reduxUser = {reduxUser} item = {item} order = {order} setOrder = {setOrder} total = {total} bakiyeSonra = {bakiyeSonra} refetch = {refetch} />\r\n  }\r\n}","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { QueryHookOptions, QueryResult } from '../types/types';\nimport { useBaseQuery } from './utils/useBaseQuery';\nimport { OperationVariables } from '../../core';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { MutationOptions, mergeOptions, ApolloCache, OperationVariables, DefaultContext } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends OperationData<MutationDataOptions<TData, TVariables, TContext, TCache>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables, TContext, TCache>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables, TContext, TCache> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables, TContext, TCache>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {} as MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        const { onError } = this.getOptions();\n        this.onMutationError(error, mutationId);\n        if (onError) {\n          onError(error);\n          return {\n            data: undefined,\n            errors: error,\n          };\n        } else {\n          throw error;\n        }\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables, TContext>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>): MutationResultWithoutClient<TData> | undefined {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n      return result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n"],"sourceRoot":""}